// MongoDB Assignment â€“ Day 11
use('emp')
// 1. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168. 
// db.restaurant.find({"cuisine": {$nin: ['American']}, "grades.score": {$gt: 70}, "address.coord.1": {$lt: '-65.754168'}});

//  2. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
// Note : Do this query without using $and operator. 
// db.restaurant.find({"cuisine": {$nin: ["American"]},"grades.score": {$gt: 70},"address.coord.0": {$lt: -65.754168}})

//  3. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order. 
// db.restaurant.find({"cuisine": {$nin: ["American"]},"grades.grade": {$eq: "A"},"borough": {$ne: "Brooklyn"}}).sort({cuisine: -1})

//  4. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name. 
// db.restaurant.find({"name": {$regex: "^Wil"}}, {"_id": 1, "name": 1, "borough": 1, "cuisine": 1})

//  5. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name. 
// db.restaurant.find({"name": {$regex: "ces$"}}, {"_id": 1, "name": 1, "borough": 1, "cuisine": 1})

//  6. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name. 
// db.restaurant.find({"name": {$regex: "Reg"}}, {"_id": 1, "name": 1, "borough": 1, "cuisine": 1})

//  7. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish. 
// db.restaurant.find({"borough": "Bronx", "cuisine": {$in: ["American", "Chinese"]}},{_id: 0, name: 1, borough: 1, cuisine: 1})

//  8. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn. 
// db.restaurant.find({"borough": {$in: ["Staten Island", "Queens", "Bronx", "Brooklyn"]}}, {"_id": 1, "name": 1, "borough": 1, "cuisine": 1})

//  9. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn. 
// db.restaurant.find({"borough": {$nin: ["Staten Island", "Queens", "Bronx", "Brooklyn"]}}, {"_id": 1, "name": 1, "borough": 1, "cuisine": 1})

//  10. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10. 
// db.restaurant.find({"grades.score": {$lte: 10}}, {"_id": 1, "name": 1, "borough": 1, "cuisine": 1})

//  11. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'. 
// db.restaurant.find({"cuisine": {$nin: ["American", "Chinese"]}, "name": {$regex: "^Wil"}}, {"_id": 1, "name": 1, "borough": 1, "cuisine": 1})

//  12. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates.. 
// db.restaurant.find({"grades.date": ISODate("2014-08-11T00:00:00Z"), "grades.grade": "A", "grades.score": 11}, {"_id": 1, "name": 1, "grades": 1})

//  13. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z". 
// db.restaurant.find({"grades.2.date": ISODate("2014-08-11T00:00:00Z"), "grades.2.grade": "A", "grades.2.score": 9}, {"_id": 1, "name": 1, "grades": 1})

//  14. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52.. 
db.restaurant.find({"address.coord.1": {$gt: 42, $lte: 52}}, {"_id": 1, "name": 1, "address": 1, "address.coord": 1})